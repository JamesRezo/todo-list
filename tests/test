#!/usr/bin/env php
<?php

use Jamesrezo\TodoList\EisenhowerMethod\Task;
use Jamesrezo\TodoList\EisenhowerMethod\TaskFactory;
use Jamesrezo\TodoList\Test\Todo\Fixtures\TodoTaskRepository;
use Jamesrezo\TodoList\Todo\Team;
use Jamesrezo\TodoList\Todo\TodoList;
use Jamesrezo\TodoList\Todo\TodoTask;
use Jamesrezo\TodoList\Todo\User;
use League\Csv\Reader;
use League\Csv\Statement;

require_once __DIR__ . '/../vendor/autoload.php';

$csv = Reader::createFromPath(__DIR__ . '/Todo/Fixtures/data/team.csv', 'r');
$csv->setHeaderOffset(0);
$stmt = Statement::create();
$records = $stmt->process($csv);
foreach ($records as $record) {
    // $deadline = $record['deadline'] != '' ?
    //     (str_starts_with($record['deadline'], 'P') ?
    //         new DateInterval($record['deadline']) :
    //         DateTimeImmutable::createFromFormat('Y-m-d\TH:i:s', $record['deadline'])->diff(new DateTimeImmutable())
    //     ) : null;
    // $task = TaskFactory::createTask($record['important'] == 'true', $record['urgent'], $deadline);
    // $todoTask = new TodoTask($record['name'], $task);
    // $globalBacklog->add($record['name'], $task);
}
$csv = Reader::createFromPath(__DIR__ . '/Todo/Fixtures/data/user.csv', 'r');
$csv->setHeaderOffset(0);
$stmt = Statement::create();
$records = $stmt->process($csv);
foreach ($records as $record) {
    // $deadline = $record['deadline'] != '' ?
    //     (str_starts_with($record['deadline'], 'P') ?
    //         new DateInterval($record['deadline']) :
    //         DateTimeImmutable::createFromFormat('Y-m-d\TH:i:s', $record['deadline'])->diff(new DateTimeImmutable())
    //     ) : null;
    // $task = TaskFactory::createTask($record['important'] == 'true', $record['urgent'], $deadline);
    // $todoTask = new TodoTask($record['name'], $task);
    // $globalBacklog->add($record['name'], $task);
}
$csv = Reader::createFromPath(__DIR__ . '/Todo/Fixtures/data/team_user.csv', 'r');
$csv->setHeaderOffset(0);
$stmt = Statement::create();
$records = $stmt->process($csv);
foreach ($records as $record) {
    // $deadline = $record['deadline'] != '' ?
    //     (str_starts_with($record['deadline'], 'P') ?
    //         new DateInterval($record['deadline']) :
    //         DateTimeImmutable::createFromFormat('Y-m-d\TH:i:s', $record['deadline'])->diff(new DateTimeImmutable())
    //     ) : null;
    // $task = TaskFactory::createTask($record['important'] == 'true', $record['urgent'], $deadline);
    // $todoTask = new TodoTask($record['name'], $task);
    // $globalBacklog->add($record['name'], $task);
}

$globalBacklog = new TodoList();
$csv = Reader::createFromPath(__DIR__ . '/Todo/Fixtures/data/todotask.csv', 'r');
$csv->setHeaderOffset(0);
$stmt = Statement::create();
$records = $stmt->process($csv);
foreach ($records as $record) {
    $deadline = $record['deadline'] != '' ?
        (str_starts_with($record['deadline'], 'P') ?
            new DateInterval($record['deadline']) :
            DateTimeImmutable::createFromFormat('Y-m-d\TH:i:s', $record['deadline'])->diff(new DateTimeImmutable())
        ) : null;
    $task = TaskFactory::createTask($record['important'] == 'true', $record['urgent'], $deadline);
    $todoTask = new TodoTask($record['name'], $task);
    $globalBacklog->add($record['name'], $task);
}
dump($globalBacklog);
exit(0);

$user = new User();
$user->name = 'User';
$team1 = new Team();
$team1->name = 'Team 1';
dump(['user' => $user, 'team' => $team1]);
$team1->welcomes($user)->choosesAsLeader($user);
dump(['user' => $user, 'team' => $team1]);
$user->leaveTeam($team1);
dump(['user' => $user, 'team' => $team1]);
exit(0);

function dataTask(TodoList $list, bool $important, bool $urgent, ?DateInterval $deadline = null): TodoList
{
    static $count = 1;

    $taskName = 'TÃ¢che ' . strval($count++);
    dump($taskName);

    $task = TaskFactory::createTask($important, $urgent, $deadline);

    return $list->add($taskName, $task);
}

$todoList = dataTask($todoList, true, false, new DateInterval('P7D'));
$todoList = dataTask($todoList, true, true);
$todoList = dataTask($todoList, false, true);
$todoList = dataTask($todoList, false, false);
$todoList = dataTask($todoList, false, false);

$mine = $todoList->mine();

$task = $mine->pick();
dump('first to do', $task);
$todoList = $todoList->postpone($task, new DateInterval('P8D'));
dump('+8 days... so, for ' . $task->when->add(new DateInterval('P8D'))->format('Y-m-d H:i:s'));
dump('new first to do', $todoList->mine()->pick());

$task = $todoList->mine()->pick();
$todoList->drop($task);
dump('dropping it');
dump('new new first to do', $todoList->mine()->pick());

dump('backlog', $todoList->backlog());
$task = $todoList->backlog()->pick();

$delegateList = new TodoList();
dump('delegate todo-list before delegation', $delegateList);
$todoList->delegate($task, $delegateList);
dump('delegate todo-list after delegation', $delegateList);

try {
    $task = $todoList->backlog()->pick();
    $todoList->reprioritize($task, true, true);
} catch (\Throwable $th) {
    dump($th->getMessage());
}

if ($todoList->backlog()->isEmpty()) {
    dump('Le backlog est vide.');
}

try {
    $task = $todoList->backlog(findSomeone: false)->pick();
    dump('before reprioritizaton', $task);
    $todoList->reprioritize($task, true, true);
    dump($todoList->mine()->pick());
} catch (\Throwable $th) {
    dump($th->getMessage());
}
